{"version":3,"sources":["colorScale.js","icons/ClosedSelectorPanelIcon.js","icons/OpenedSelectorPanelIcon.js","components/common/IconicTitle.js","icons/LayersIcon.js","components/MapStylePicker.js","styles/styledComponents.js","components/columnDefinitionsForBuildings.js","components/CallModalSelector.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["colorScaleByValue","range","data","key","toHsl","count","_","countBy","item","NaN","min","Number","MAX_VALUE","max","MIN_VALUE","it","position","color","d3Color","Color","hsl","replace","split","ClosedSelectorPanelIconSVG","width","height","viewBox","fill","xmlns","x","y","rx","stroke","stroke-width","d","ClosedSelectorPanelIcon","props","Icon","component","OpenedSelectorPanelIconSVG","OpenedSelectorPanelIcon","StyledIconicTitle","styled","div","IconicTitle","icon","className","text","LayersIconSVG","LayersIcon","Option","Select","MAPBOX_DEFAULT_MAPSTYLES","label","value","MapStylePicker","currentStyle","onStyleChange","style","onChange","map","Button","Collapse","StyledModal","Modal","columnDefs","headerName","field","sort","CallModalSelector","handleSelectCall","handleToggleModal","modalVisible","useState","selected","setSelected","aggSettings","modules","AllModules","defaultColDef","resizable","enableValue","enableRowGroup","enablePivot","sortable","filter","pivotRowTotals","rowGroupPanelShow","localeText","page","more","to","of","next","last","first","previous","loadingOoo","selectAll","searchOoo","blanks","filterOoo","applyFilter","equals","notEqual","lessThan","greaterThan","lessThanOrEqual","greaterThanOrEqual","inRange","contains","notContains","startsWith","endsWith","andCondition","orCondition","group","columns","filters","rowGroupColumns","rowGroupColumnsEmptyMessage","valueColumns","pivotMode","groups","values","pivots","valueColumnsEmptyMessage","pivotColumnsEmptyMessage","toolPanelButton","noRowsToShow","enabled","pinColumn","valueAggregation","autosizeThiscolumn","autosizeAllColumns","groupBy","ungroupBy","resetColumns","expandAll","collapseAll","toolPanel","export","csvExport","excelExport","excelXmlExport","pivotChartAndPivotMode","pivotChart","chartRange","columnChart","groupedColumn","stackedColumn","normalizedColumn","barChart","groupedBar","stackedBar","normalizedBar","pieChart","pie","doughnut","line","xyChart","scatter","bubble","areaChart","area","stackedArea","normalizedArea","pinLeft","pinRight","noPin","sum","none","average","filteredRows","selectedRows","totalRows","totalAndFilteredRows","copy","copyWithHeaders","ctrlC","paste","ctrlV","pivotChartTitle","rangeChartTitle","settings","format","categories","series","xyValues","paired","axis","thickness","xRotation","yRotation","ticks","length","padding","chart","title","background","font","top","right","bottom","left","labels","size","minSize","maxSize","legend","markerSize","markerStroke","markerPadding","itemPaddingX","itemPaddingY","strokeWidth","offset","offsets","tooltips","callout","markers","shadow","blur","xOffset","yOffset","lineWidth","normal","bold","italic","boldItalic","predefined","fillOpacity","strokeOpacity","columnGroup","barGroup","pieGroup","lineGroup","scatterGroup","areaGroup","groupedColumnTooltip","stackedColumnTooltip","normalizedColumnTooltip","groupedBarTooltip","stackedBarTooltip","normalizedBarTooltip","pieTooltip","doughnutTooltip","lineTooltip","groupedAreaTooltip","stackedAreaTooltip","normalizedAreaTooltip","scatterTooltip","bubbleTooltip","noDataToChart","pivotChartRequiresPivotMode","visible","onOk","onCancel","rowData","rowSelection","animateRows","sideBar","onRowClicked","valueCache","checkboxSelection","enableCellChangeFlash","popupParent","enableRangeSelection","enableCharts","groupSelectsChildren","groupMultiAutoColumn","suppressDragLeaveHidesColumns","INITIAL_VIEW_STATE","altitude","bearing","latitude","longitude","pitch","zoom","StyledSelectorsPanel","StyledSelectorsOpenPanelButton","StyledLegendOpenPanelButton","StyledButtonPanel","StyledButtonLegend","StyledPanelHeader","StyledLayersSettingsContainer","StyledLegendContainer","StyledLegendElementContainer","Map","state","dateRange","chartsData","selectorPanelOpened","legendPanelOpened","accidentLayer","radiusScale","hexagonRadius","colorParameter","showDataTable","viewState","colorRange","legendRendered","preloaded","filteredData","Elements","unique","flag","indexOf","numberOfUnique","el","push","backgroundColor","setState","onChangeColorRendererParameter","event","target","handleViewStateChange","axios","get","then","res","objects","renderField","catch","err","console","log","object","properties","this","hover","hoveredObject","Set","reverse","swap","a","b","layers","PolygonLayer","id","pickable","extruded","stroked","filled","wireframe","lineWidthMinPixels","getPolygon","wkt","coordinates","e","getElevation","count_of_storeys","getFillColor","isRange","colorScale","updateTriggers","getLineColor","getLineWidth","onHover","_onHover","maxHeight","window","innerHeight","innerWidth","onClick","Group","bind","defaultChecked","element","parsed","center","centerOfMass","geometry","transitionDuration","transitionInterpolator","FlyToInterpolator","alert","maxWidth","fontSize","zIndex","overflowY","pointerEvents","transform","initialViewState","controller","onViewStateChange","mapboxApiAccessToken","mapStyle","Component","App","viewport","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4f6979a.chunk.js","sourcesContent":["import * as d3Color from \"d3-scale-chromatic\";\nimport * as d3Array from \"d3-array\";\nimport _ from 'underscore'\nimport Color from \"color\";\n\nexport const colorScale = (range, data, isRange = false, reverse = true, field = null) => {\n    if (!data) return [255, 255, 255];\n    if (!isRange) {\n        const position = reverse ? 1 - (range.indexOf(data) / (range.length - 1)) : range.indexOf(data) / (range.length - 1);\n        if (field === 'building_year') {\n            const color = (d3Color.interpolateTurbo(position)).replace('rgb(', '').replace(')', '').replace(' ', '').replace(' ', '').split(',');\n            ;\n            return [Number(color[0]), Number(color[1]), Number(color[2])];\n        } else {\n            const color = (d3Color.interpolateRdYlGn(position)).replace('rgb(', '').replace(')', '').replace(' ', '').replace(' ', '').split(',');\n            ;\n            return [Number(color[0]), Number(color[1]), Number(color[2])];\n        }\n\n    } else {\n        const max = range.length;\n        const position = range.indexOf(data) / max;\n        if (field === 'building_year') {\n            const color = (d3Color.interpolateTurbo(position)).replace('rgb(', '').replace(')', '').replace(' ', '').replace(' ', '').split(',');\n            ;\n            return [Number(color[0]), Number(color[1]), Number(color[2])];\n        } else {\n            const color = d3Color.interpolateRdYlGn(position).replace('rgb(', '').replace(')', '').replace(' ', '').replace(' ', '').split(',');\n            return [Number(color[0]), Number(color[1]), Number(color[2])];\n        }\n\n    }\n}\n\nexport const colorScaleByValue = (range, data, key, toHsl = false) => {\n    if (!data) return [255, 255, 255];\n    const count = _.countBy(range, (item) => item[key]);\n    delete count.NaN\n    let min = Number.MAX_VALUE;\n    let max = Number.MIN_VALUE;\n    for (let it in count) {\n        if (count[it] < min) min = count[it];\n        if (count[it] > max) max = count[it];\n    }\n    const position = count[data] / max;\n    let color = d3Color.interpolateRdYlGn(position)\n    if (toHsl){\n        return Color(color).hsl();\n    } else {\n    color = color.replace('rgb(', '').replace(')', '').replace(' ', '').replace(' ', '').split(',');\n        return [Number(color[0]), Number(color[1]), Number(color[2])];\n    }\n\n\n\n}\n","import React from \"react\";\nimport Icon from \"@ant-design/icons\";\n\nconst ClosedSelectorPanelIconSVG = () => (\n    <svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect x=\"1\" y=\"1\" width=\"46\" height=\"46\" rx=\"7\" fill=\"none\" stroke=\"#2F80ED\" stroke-width=\"2\"/>\n        <path d=\"M21 15L15.36 16.9C15.15 16.97 15 17.15 15 17.38V32.5C15 32.6326 15.0527 32.7598 15.1464 32.8536C15.2402 32.9473 15.3674 33 15.5 33L15.66 32.97L21 30.9L27 33L32.64 31.1C32.85 31.03 33 30.85 33 30.62V15.5C33 15.3674 32.9473 15.2402 32.8536 15.1464C32.7598 15.0527 32.6326 15 32.5 15L32.34 15.03L27 17.1L21 15ZM20 17.45V29.15L17 30.31V18.46L20 17.45ZM22 17.47L26 18.87V30.53L22 29.13V17.47ZM31 17.7V29.54L28 30.55V18.86L31 17.7ZM19.46 18.3L17.57 18.97V21.12L19.46 20.45V18.3ZM19.46 21.05L17.57 21.72V23.87L19.46 23.2V21.05ZM19.46 23.8L17.57 24.47V26.62L19.46 25.95V23.8ZM19.46 26.55L17.57 27.22V29.37L19.46 28.7V26.55Z\" fill=\"#2F80ED\"/>\n    </svg>\n\n);\n\nexport const ClosedSelectorPanelIcon = props => <Icon component={ClosedSelectorPanelIconSVG} {...props} />;\n","import React from \"react\";\nimport Icon from \"@ant-design/icons\";\n\nconst OpenedSelectorPanelIconSVG = () => (\n    <svg width=\"48\" height=\"48\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"48\" height=\"48\" rx=\"8\" fill=\"#1A1B1E\"/>\n        <path d=\"M33 27.61L31.59 29L26.58 24L31.59 19L33 20.39L29.44 24L33 27.61ZM15 18H28V20H15V18ZM15 25V23H25V25H15ZM15 30V28H28V30H15Z\" fill=\"#2F80ED\"/>\n    </svg>\n);\n\nexport const OpenedSelectorPanelIcon = props => <Icon component={OpenedSelectorPanelIconSVG} {...props} />;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledIconicTitle = styled.div`\n  display: flex;\n  padding-left: 25px;\n  .title{\n    font-family: Open Sans;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 22px;\n    color: #FFFFFF;\n    padding-left: 20px;\n  }\n`\nconst IconicTitle = (props) => {\n    return (\n        <StyledIconicTitle>\n            {props.icon}\n            <p className={'title'}>{props.text}</p>\n        </StyledIconicTitle>\n    )\n}\n\nexport default IconicTitle;\n","import React from \"react\";\nimport Icon from \"@ant-design/icons\";\n\nconst LayersIconSVG = () => (\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 0L3 7L4.63 8.27L12 14L19.36 8.27L21 7L12 0ZM19.37 10.73L12 16.47L4.62 10.74L3 12L12 19L21 12L19.37 10.73ZM19.37 15.73L12 21.47L4.62 15.74L3 17L12 24L21 17L19.37 15.73Z\" fill=\"#EB5757\"/>\n    </svg>\n\n);\n\nexport const LayersIcon = props => <Icon component={LayersIconSVG} {...props} />;\n","import React from \"react\";\nimport {Select} from \"antd\";\nconst {Option} = Select;\n\nconst MAPBOX_DEFAULT_MAPSTYLES = [\n    { label: 'Streets V10', value: 'mapbox://styles/mapbox/streets-v10' },\n    { label: 'Outdoors V10', value: 'mapbox://styles/mapbox/outdoors-v10' },\n    { label: 'Light V9', value: 'mapbox://styles/mapbox/light-v9' },\n    { label: 'Dark V9', value: 'mapbox://styles/mapbox/dark-v9' },\n    { label: 'Satellite V9', value: 'mapbox://styles/mapbox/satellite-v9' },\n    {\n        label: 'Satellite Streets V10',\n        value: 'mapbox://styles/mapbox/satellite-streets-v10'\n    },\n    {\n        label: 'Navigation Preview Day V4',\n        value: 'mapbox://styles/mapbox/navigation-preview-day-v4'\n    },\n    {\n        label: 'Navitation Preview Night V4',\n        value: 'mapbox://styles/mapbox/navigation-preview-night-v4'\n    },\n    {\n        label: 'Navigation Guidance Day V4',\n        value: 'mapbox://styles/mapbox/navigation-guidance-day-v4'\n    },\n    {\n        label: 'Navigation Guidance Night V4',\n        value: 'mapbox://styles/mapbox/navigation-guidance-night-v4'\n    }\n];\n\nconst MapStylePicker = ({ currentStyle, onStyleChange }) => {\n    return (\n        <Select\n            style={{ width: '80%' }}\n            value={currentStyle}\n            onChange={value => {\n                onStyleChange(value)\n            }}\n        >\n            {MAPBOX_DEFAULT_MAPSTYLES.map(style => (\n                <Option key={style.value} value={style.value}>\n                    {style.label}\n                </Option>\n            ))}\n        </Select>\n    );\n}\n\n\nexport default MapStylePicker;\n","import styled from \"styled-components\";\nimport {Button, Collapse, Modal} from \"antd\";\n\nexport const StyledSelectorsPanel = styled.div`\n  position: absolute;\n  width: 410px;\n  height: 100vh;\n  left: 0px;\n  top: 0px;\n  background: rgba(21, 21, 24, 0.9);\n  z-index: 1000;\n`\nexport const StyledSelectorsOpenPanelButton = styled.div`\n  position: absolute;\n  width: 88px;\n  height: 88px;\n  left: 0;\n  top: 0;\n  background: rgba(21, 21, 24, 0.9);\n  border-radius: 0px 0px 0px 8px;\n  transform: matrix(-1, 0, 0, 1, 0, 0);\n  z-index: 1000;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\nexport const StyledLegendOpenPanelButton = styled.div`\n  position: absolute;\n  width: 88px;\n  height: 88px;\n  right: 0;\n  top: 0;\n  background: rgba(21, 21, 24, 0.9);\n  border-radius: 0px 0px 0px 8px;\n  z-index: 1000;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nexport const StyledButtonPanel = styled(Button)`\n    width: 50px;\n    height: 50px;\n    padding: 0;\n    border-radius: 8px;\n`\n\nexport const StyledCollapse = styled(Collapse)`\n    background: rgba(21,21,24,0.9);\n`\n\nexport const StyledButtonLegend = styled(Button)`\n    width: 50px;\n    height: 50px;\n    padding: 0;\n    border-radius: 8px;\n`\n\nexport const StyledPanelHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    padding: 20px;\n    align-items: center;\n    \n`\n\nexport const StyledLayersSettingsContainer = styled.div`\n\n    padding-bottom: 20px;\n    .radiobutton-group{\n      width: 100%;\n    }\n    .radiobutton{\n      width: 314px;\n      height: 48px;\n      background: #1A1B1E;\n      box-shadow: 4px 4px 14px #151518, -4px -4px 14px #242529;\n      border-radius: 4px;\n      font-family: Open Sans;\n      font-style: normal;\n      font-weight: normal;\n      font-size: 16px;\n      line-height: 22px;\n      color: #FFFFFF;\n      padding-left: 20px; \n      text-align: initial;\n      padding-top: 10px;\n    }\n`;\n\nexport const StyledModal = styled(Modal)`\n  width: fit-content !important;\n`\n\nexport const StyledLegendContainer = styled.div`\n   position: absolute;\n   width: 340px;\n   z-index: 100;\n   height: 100vh;\n   overflow-y: auto;\n   background: rgba(21, 21, 24, 0.85);\n   right: 0;\n   padding: 20px;\n   \n   .legend {\n    width: 121px;\n    height: 22px;\n    font-family: Open Sans;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 22px;\n    display: flex;\n    align-items: center;\n    color: #FFFFFF;\n    margin: 0;\n   }\n   \n   .titleContainer {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n   }\n`\n\nexport const StyledLegendElementContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    .titleContainer{\n      display: flex;\n      margin: 0;\n      justify-content: center;\n    }\n    .counter{\n      width: 64px;\n      height: 32px;\n      border-radius: 4px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      text-align: center;\n    }\n    .description{\n      color: white;\n      width: 280px;\n      text-align: left;\n      padding-left: 20px;\n    }\n`\n","export const columnDefs = [\n    {headerName: 'Адрес', field: 'address'},\n    {headerName: 'Площадь жилых помещений', field: 'area_of_hatas', sort: \"asc\"},\n    {headerName: 'Год постройки', field: 'building_year', sort: \"asc\"},\n    {headerName: 'Код', field: 'code', sort: \"asc\"},\n    {headerName: 'Код erc', field: 'code_erc', sort: \"asc\"},\n    {headerName: 'Состояние здания', field: 'condition', sort: \"asc\"},\n    {headerName: 'Этажность', field: 'count_of_storeys', sort: \"asc\"},\n    {headerName: 'Вид материала', field: 'capital_group', sort: \"asc\"},\n    {headerName: 'Район', field: 'district', sort: \"asc\"},\n    {headerName: 'Общая площадь', field: 'full_area', sort: \"asc\"},\n    {headerName: 'Муниципалитет', field: 'municipality', sort: \"asc\"},\n    {headerName: 'Обслуживающая организация', field: 'organization', sort: \"asc\"},\n    {headerName: 'Статус проверки', field: 'status', sort: \"asc\"},\n    {headerName: 'Тип дома', field: 'type', sort: \"asc\"},\n]\n","import React, {useState} from \"react\";\nimport {StyledModal} from \"../styles/styledComponents\";\nimport {AgGridReact} from \"ag-grid-react\";\nimport * as AllModules from \"ag-grid-enterprise\";\nimport 'ag-grid-community/dist/styles/ag-grid.css'\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css'\nimport 'ag-grid-enterprise'\nimport {columnDefs} from \"./columnDefinitionsForBuildings\";\n\nconst CallModalSelector = (props) => {\n\n    const {handleSelectCall, handleToggleModal, data, modalVisible} = props;\n    const [selected,setSelected] = useState(null);\n\n    const aggSettings =  {\n        modules: AllModules,\n            defaultColDef: {\n            resizable: true,\n                enableValue: true,\n                enableRowGroup: true,\n                enablePivot: true,\n                sortable: true,\n                filter: true,\n        },\n        columnDefs: columnDefs,\n            pivotRowTotals: 'before',\n            rowGroupPanelShow: \"always\",\n            localeText: {\n            page: \"страница\",\n                more: \"больше\",\n                to: \"к\",\n                of: \"от\",\n                next: \"следующий\",\n                last: \"последний\",\n                first: \"первый\",\n                previous: \"предыдущий\",\n                loadingOoo: \"загружается...\",\n                selectAll: \"выбрать все\",\n                searchOoo: \"поиск ...\",\n                blanks: \"пустой\",\n                filterOoo: \"фильтровать...\",\n                applyFilter: \"применить фильтр...\",\n                equals: \"равно\",\n                notEqual: \"не равно\",\n                lessThan: \"меньше, чем\",\n                greaterThan: \"больше, чем\",\n                lessThanOrEqual: \"меньше, чем\",\n                greaterThanOrEqual: \"больше или равно\",\n                inRange: \"в диапазоне\",\n                contains: \"содержит\",\n                notContains: \"не содержит\",\n                startsWith: \"начинается\",\n                endsWith: \"заканчиватся здесь\",\n                andCondition: \"Логическое И\",\n                orCondition: \"Логическое ИЛИ\",\n                group: \"Группа\",\n                columns: \"Колонки\",\n                filters: \"Фильтры\",\n                rowGroupColumns: \"laPivot Cols\",\n                rowGroupColumnsEmptyMessage: \"Перетащите столбец для группировки\",\n                valueColumns: \"Значение Колонки\",\n                pivotMode: \"Сводные таблицы\",\n                groups: \"Группы\",\n                values: \"Значения\",\n                pivots: \"Углы\",\n                valueColumnsEmptyMessage: \"Перетащите столбец для группировки\",\n                pivotColumnsEmptyMessage: \"Перетащите столбец для группировки\",\n                toolPanelButton: \"Кнопка панели управления\",\n                noRowsToShow: \"Скрытые строки\",\n                enabled: \"Активный\",\n                pinColumn: \"Активная колонка\",\n                valueAggregation: \"Среднее значение\",\n                autosizeThiscolumn: \"Авторазмер этой колонки\",\n                autosizeAllColumns: \"Авторазмер всех колонок\",\n                groupBy: \"Группировать по\",\n                ungroupBy: \"Разгруппировать по\",\n                resetColumns: \"Сбросить колонки\",\n                expandAll: \"Развернуть\",\n                collapseAll: \"Свернуть\",\n                toolPanel: \"Панель инструментов\",\n        export: \"Экспорт\",\n                csvExport: \"Экспорт в CSV\",\n                excelExport: \"Экспорт в Эксель (.xlsx)\",\n                excelXmlExport: \"Экспорт в Эксель (.xml)\",\n                pivotChartAndPivotMode: \"laPivot Chart & Pivot Mode\",\n                pivotChart: \"laPivot Chart\",\n                chartRange: \"Построить диаграмму\",\n                columnChart: \"Столбцовая диаграмма\",\n                groupedColumn: \"Группированные колонки\",\n                stackedColumn: \"Сгруппированные колонки\",\n                normalizedColumn: \"la100% Stacked\",\n                barChart: \"Шкала\",\n                groupedBar: \"Группирования шкала\",\n                stackedBar: \"Свернутая шкала\",\n                normalizedBar: \"la100% Stacked\",\n                pieChart: \"Круговая диаграмма\",\n                pie: \"Круг\",\n                doughnut: \"laDoughnut\",\n                line: \"Линия\",\n                xyChart: \"Диаграмма Х-У\",\n                scatter: \"laScatter\",\n                bubble: \"Пузырь\",\n                areaChart: \"laArea\",\n                area: \"laArea\",\n                stackedArea: \"laStacked\",\n                normalizedArea: \"la100% Stacked\",\n                pinLeft: \"laPin &lt;&lt;\",\n                pinRight: \"laPin &gt;&gt;\",\n                noPin: \"laDontPin &lt;&gt;\",\n                sum: \"Сум\",\n                min: \"Мин\",\n                max: \"Макс\",\n                none: \"None\",\n                count: \"Количество\",\n                average: \"Всего\",\n                filteredRows: \"Фильтрованные строки\",\n                selectedRows: \"Выбранные строки\",\n                totalRows: \"Всего строк\",\n                totalAndFilteredRows: \"Всего фильтрованных строк\",\n                copy: \"Копировать\",\n                copyWithHeaders: \"Копировать с загаловками\",\n                ctrlC: \"ctrl + C\",\n                paste: \"Встваить\",\n                ctrlV: \"ctrl + V\",\n                pivotChartTitle: \"Угол загаловка диаграммы\",\n                rangeChartTitle: \"Название диаграммы\",\n                settings: \"Настройки\",\n                data: \"Данные\",\n                format: \"Формат\",\n                categories: \"Категории\",\n                series: \"Наборы\",\n                xyValues: \"Значения Х У\",\n                paired: \"laPaired Mode\",\n                axis: \"Ось\",\n                color: \"Цвет\",\n                thickness: \"Толщина\",\n                xRotation: \"Наклон по Х\",\n                yRotation: \"Наклон по У\",\n                ticks: \"laTicks\",\n                width: \"Высота\",\n                length: \"Ширина\",\n                padding: \"Отступ\",\n                chart: \"laChart\",\n                title: \"Название\",\n                background: \"Фон\",\n                font: \"Шрифт\",\n                top: \"Верх\",\n                right: \"Справа\",\n                bottom: \"Снизу\",\n                left: \"Слева\",\n                labels: \"Названия\",\n                size: \"Размер\",\n                minSize: \"Минимальный размер\",\n                maxSize: \"Максимальный размер\",\n                legend: \"История\",\n                position: \"Позиция\",\n                markerSize: \"Размер маркера\",\n                markerStroke: \"laMarker Stroke\",\n                markerPadding: \"Отступ маркера\",\n                itemPaddingX: \"laItem Padding X\",\n                itemPaddingY: \"laItem Padding Y\",\n                strokeWidth: \"laStroke Width\",\n                offset: \"Смещение\",\n                offsets: \"Смещения\",\n                tooltips: \"Подсказки?\",\n                callout: \"Отзыв\",\n                markers: \"Маркеры\",\n                shadow: \"Тень\",\n                blur: \"Размытие\",\n                xOffset: \"Смещение по Х\",\n                yOffset: \"Смещение по У\",\n                lineWidth: \"Высота строки\",\n                normal: \"Нормально\",\n                bold: \"Жирный\",\n                italic: \"Наклон\",\n                boldItalic: \"Жирный с наклоном\",\n                predefined: \"Предопределенный\",\n                fillOpacity: \"Прозрачность заливки\",\n                strokeOpacity: \"Прозрачность линии\",\n                columnGroup: \"Колонка\",\n                barGroup: \"laBar\",\n                pieGroup: \"laPie\",\n                lineGroup: \"laLine\",\n                scatterGroup: \"laScatter\",\n                areaGroup: \"laArea\",\n                groupedColumnTooltip: \"laGrouped\",\n                stackedColumnTooltip: \"laStacked\",\n                normalizedColumnTooltip: \"la100% Stacked\",\n                groupedBarTooltip: \"Групповая диаграмма\",\n                stackedBarTooltip: \"Вертикальная диаграмма\",\n                normalizedBarTooltip: \"Нормализованная вертикальная диаграмма\",\n                pieTooltip: \"Пирог\",\n                doughnutTooltip: \"Пончик\",\n                lineTooltip: \"Линейная диаграмма\",\n                groupedAreaTooltip: \"laGrouped\",\n                stackedAreaTooltip: \"laStacked\",\n                normalizedAreaTooltip: \"Нормализованная диаграмма\",\n                scatterTooltip: \"Точечная диаграмма\",\n                bubbleTooltip: \"Пузырьковая диаграмма\",\n                noDataToChart: \"Нет доступных данных для диаграммы.\",\n                pivotChartRequiresPivotMode: \"Сводная диаграмма требует включения сводного режима\"\n        },\n    }\n\n    const handleSelectSingle = ({data}) => {\n        setSelected(data)\n    }\n\n    const handleProvideData = () => {\n        handleSelectCall(selected)\n    }\n\n    return (\n        <StyledModal\n            title=\"Дома\"\n            visible={modalVisible}\n            onOk={handleProvideData}\n            onCancel={handleToggleModal}>\n            <div\n                className=\"ag-theme-balham\"\n                style={{\n                    width: '90vw',\n                    height: '70vh'\n                }}\n            >\n                <AgGridReact\n                    columnDefs={aggSettings.columnDefs}\n                    rowData={data}\n                    defaultColDef={aggSettings.defaultColDef}\n                    rowSelection=\"single\"\n                    // onGridReady={this.onGridReady}\n                    animateRows={true}\n                    sideBar={true}\n                    onRowClicked={handleSelectSingle}\n                    valueCache={true}\n                    checkboxSelection={true}\n                    enableCellChangeFlash={true}\n                    popupParent={aggSettings.popupParent}\n                    enableRangeSelection={true}\n                    enableCharts={true}\n                    groupSelectsChildren={true}\n                    groupMultiAutoColumn={true}\n                    localeText={aggSettings.localeText}\n                    rowGroupPanelShow={aggSettings.rowGroupPanelShow}\n                    suppressDragLeaveHidesColumns={true}\n                />\n            </div>\n        </StyledModal>\n    )\n}\n\nexport default CallModalSelector\n","import React, {Component} from 'react';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL, {GeoJsonLayer, ArcLayer, HeatmapLayer, HexagonLayer, PolygonLayer} from 'deck.gl';\nimport axios from 'axios';\nimport * as wkt from \"wkt\";\nimport {colorScale, colorScaleByValue} from \"./colorScale\";\nimport Color from \"color\";\nimport * as d3Color from \"d3-scale-chromatic\";\nimport {TYPES} from \"./types.vocabulary\";\nimport {Button, message, Radio} from \"antd\";\nimport moment from \"moment\";\nimport 'antd/dist/antd.css'\nimport styled from \"styled-components\";\nimport {ClosedSelectorPanelIcon} from \"./icons/ClosedSelectorPanelIcon\";\nimport {OpenedSelectorPanelIcon} from \"./icons/OpenedSelectorPanelIcon\";\nimport IconicTitle from \"./components/common/IconicTitle\";\nimport {LayersIcon} from \"./icons/LayersIcon\";\nimport MapStylePicker from \"./components/MapStylePicker\";\nimport CallModalSelector from \"./components/CallModalSelector\";\nimport centerOfMass from \"@turf/center-of-mass\";\nimport {FlyToInterpolator} from \"react-map-gl\";\n\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiaWduaW9zdHl1bWVuIiwiYSI6ImNrNXJxYmcxejA1dXQzbXFzZGp6bHU3MXQifQ.4LbAc12EWgTiDXUMZ76sfQ'; // eslint-disable-line\n\n\nconst INITIAL_VIEW_STATE = {\n    altitude: 1.5,\n    bearing: -1.03125,\n    latitude: 57.132838180789534,\n    longitude: 65.60480240246815,\n    pitch: 48.84816753926702,\n    zoom: 11.88010384143794,\n};\n\nconst checkForPrimitive = (value) => {\n    switch (typeof value) {\n        case \"undefined\":\n            return 'Не определено'\n            break;\n        case \"function\":\n            return 'Поле содержит функцию'\n            break;\n        case 'NaN' :\n            return 'Не число'\n            break;\n        case \"boolean\":\n            if (value)\n                return 'Истина'\n            else return 'Ложь';\n            break\n        default:\n            return value\n    }\n}\n\nconst prepareDataToChart = (data) => {\n    let setOfData = [...new Set(data.map(item => item.properties['date_time']))];\n    let result = [];\n    setOfData.sort();\n    const minDate = moment(setOfData[0]);\n    const maxDate = moment(setOfData[setOfData.length - 1])\n    let dateIter = minDate;\n    while (dateIter.isSameOrBefore(maxDate)) {\n        const iterMonth = dateIter.get('month');\n        const iterYear = dateIter.get('year');\n        const properObjects = data.filter(el => {\n            const nowMoment = moment(el.properties['date_time']);\n            const month = nowMoment.get('month');\n            const year = nowMoment.get('year');\n            if (month === iterMonth && year === iterYear) return true\n        })\n        const types = [...new Set(properObjects.map(item => item.properties['type']))];\n        let typesResult = {}\n        for (let field of types) {\n            typesResult[TYPES[field]] = properObjects.filter(item => item.properties['type'] == field).length\n        }\n        const x = `${iterMonth + 1 < 10 ? '0' + (iterMonth + 1) : iterMonth + 1}/${iterYear}`;\n        const participants = properObjects.reduce(function (acc, element) {\n            return acc += element.properties.members_amount\n        }, 0)\n        const wounded = properObjects.reduce(function (acc, element) {\n            return acc += element.properties.wounded_amount\n        }, 0)\n        const mortal = properObjects.reduce(function (acc, element) {\n            return acc += element.properties.lost_amount\n        }, 0)\n        result.push({\n            x, ...typesResult,\n            people: {\n                participants,\n                wounded,\n                mortal\n            }\n        })\n        dateIter.add(1, 'months')\n    }\n    return result\n}\n\nconst StyledSelectorsPanel = styled.div`\n  position: absolute;\n  width: 410px;\n  height: 100vh;\n  left: 0px;\n  top: 0px;\n  background: rgba(21, 21, 24, 0.9);\n  z-index: 1000;\n`\nconst StyledSelectorsOpenPanelButton = styled.div`\n  position: absolute;\n  width: 88px;\n  height: 88px;\n  left: 0;\n  top: 0;\n  background: rgba(21, 21, 24, 0.9);\n  border-radius: 0px 0px 0px 8px;\n  transform: matrix(-1, 0, 0, 1, 0, 0);\n  z-index: 1000;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\nconst StyledLegendOpenPanelButton = styled.div`\n  position: absolute;\n  width: 88px;\n  height: 88px;\n  right: 0;\n  top: 0;\n  background: rgba(21, 21, 24, 0.9);\n  border-radius: 0px 0px 0px 8px;\n  z-index: 1000;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`\n\nconst StyledButtonPanel = styled(Button)`\n    width: 50px;\n    height: 50px;\n    padding: 0;\n    border-radius: 8px;\n`\n\nconst StyledButtonLegend = styled(Button)`\n    width: 50px;\n    height: 50px;\n    padding: 0;\n    border-radius: 8px;\n`\n\nconst StyledPanelHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    padding: 20px;\n    align-items: center;\n    \n`\n\nconst StyledLayersSettingsContainer = styled.div`\n\n    padding-bottom: 20px;\n    .radiobutton-group{\n      width: 100%;\n    }\n    .radiobutton{\n      width: 314px;\n      height: 48px;\n      background: #1A1B1E;\n      box-shadow: 4px 4px 14px #151518, -4px -4px 14px #242529;\n      border-radius: 4px;\n      font-family: Open Sans;\n      font-style: normal;\n      font-weight: normal;\n      font-size: 16px;\n      line-height: 22px;\n      color: #FFFFFF;\n      padding-left: 20px; \n      text-align: initial;\n      padding-top: 10px;\n    }\n`;\n\nconst StyledLegendContainer = styled.div`\n   position: absolute;\n   width: 340px;\n   z-index: 100;\n   height: 100vh;\n   overflow-y: auto;\n   background: rgba(21, 21, 24, 0.85);\n   right: 0;\n   padding: 20px;\n   \n   .legend {\n    width: 121px;\n    height: 22px;\n    font-family: Open Sans;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 22px;\n    display: flex;\n    align-items: center;\n    color: #FFFFFF;\n    margin: 0;\n   }\n   \n   .titleContainer {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n   }\n`\n\nconst StyledLegendElementContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    .titleContainer{\n      display: flex;\n      margin: 0;\n      justify-content: center;\n    }\n    .counter{\n      width: 64px;\n      height: 32px;\n      border-radius: 4px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      text-align: center;\n    }\n    .description{\n      color: white;\n      width: 280px;\n      text-align: left;\n      padding-left: 20px;\n    }\n`\n\nclass Map extends Component {\n\n    state = {\n        data: null,\n        filter: null,\n        dateRange: null,\n        chartsData: null,\n        selectorPanelOpened: false,\n        legendPanelOpened: false,\n        accidentLayer: 'point',\n        radiusScale: 10,\n        hexagonRadius: 100,\n        colorParameter: 'building_year',\n        showDataTable: false,\n        viewState: INITIAL_VIEW_STATE,\n        selected: null,\n\n        style: 'mapbox://styles/mapbox/light-v9',\n\n    }\n\n    colorRange = [0, 1];\n\n    componentDidMount() {\n        axios.get('https://av.admtyumen.ru/api/common/house')\n            .then(res => {\n                this.setState({preloaded: res.data.objects});\n                this.setState({renderField: 'area'});\n            })\n            .catch(\n                (err) => console.log(err)\n            );\n    }\n\n    _onHover({x, y, object}) {\n        const properties = object;\n        let label = []\n        if (properties) {\n            label.push(`Адрес : ${properties['address']}`)\n            label.push(`Площадь жилых помещений : ${properties['area_of_hatas']}`)\n            label.push(`Год постройки : ${properties['building_year']}`)\n            label.push(`Материал : ${properties['capital_group']}`)\n            label.push(`Код здания : ${properties['code']}`)\n            label.push(`Код erc : ${properties['code_erc']}`)\n            label.push(`Состояние : ${properties['condition']}`)\n            label.push(`Этажность : ${properties['count_of_storeys']}`)\n            label.push(`Район : ${properties['district']}`)\n            label.push(`Общая площадь : ${properties['full_area']}`)\n            label.push(`Муниципалитет : ${properties['municipality']}`)\n            label.push(`Обслуживающая организация : ${properties['organization']}`)\n            label.push(`Статус : ${properties['status']}`)\n            label.push(`Тип дома : ${properties['type']}`)\n\n        }\n        this.setState({hover: {x, y, hoveredObject: object, label}});\n    }\n\n\n    legendRendered = () => {\n        if (!this.state.preloaded) return null;\n        let filteredData = this.state.preloaded;\n        const Elements = [];\n        for (let unique of this.colorRange) {\n            if (typeof unique === 'object') continue;\n            let flag = false;\n\n            const position = this.colorRange.indexOf(unique) / (this.colorRange.length);\n            if (this.state.colorParameter === 'organization') {\n                const color = colorScaleByValue(this.state.preloaded, unique, 'organization', true)\n                if (color.color[2] <= 50) flag = true;\n                const numberOfUnique = filteredData.filter(el => el[this.state.colorParameter] == unique).length\n                if (numberOfUnique) {\n                    Elements.push(\n                        <StyledLegendElementContainer>\n                            <p className={'counter'} style={{\n                                backgroundColor: color,\n                                color: flag ? 'white' : 'black',\n                            }}>{numberOfUnique}</p>\n                            <p className={'description'}\n                               style={{}}>{unique}</p>\n\n                        </StyledLegendElementContainer>)\n                }\n            } else if (this.state.colorParameter === 'building_year') {\n                const color = Color(d3Color.interpolateTurbo(position)).hsl();\n                if (color.color[2] <= 50) flag = true;\n                const numberOfUnique = filteredData.filter(el => el[this.state.colorParameter] == unique).length\n                if (numberOfUnique) {\n                    Elements.push(\n                        <StyledLegendElementContainer>\n                            <p className={'counter'} style={{\n                                backgroundColor: color,\n                                color: flag ? 'white' : 'black',\n                            }}>{numberOfUnique}</p>\n                            <p className={'description'}\n                               style={{}}>{unique}</p>\n\n                        </StyledLegendElementContainer>)\n                }\n            } else {\n                const color = Color(d3Color.interpolateRdYlGn(position)).hsl();\n                if (color.color[2] <= 50) flag = true;\n                const numberOfUnique = filteredData.filter(el => el[this.state.colorParameter] == unique).length\n                if (numberOfUnique) {\n                    Elements.push(\n                        <StyledLegendElementContainer>\n                            <p className={'counter'} style={{\n                                backgroundColor: color,\n                                color: flag ? 'white' : 'black',\n                            }}>{numberOfUnique}</p>\n                            <p className={'description'}\n                               style={{}}>{unique}</p>\n\n                        </StyledLegendElementContainer>)\n                }\n            }\n\n        }\n        return Elements\n    }\n\n    onStyleChange = (style) => {\n        this.setState({style});\n    }\n\n    onChangeColorRendererParameter = (event) => {\n        this.setState({colorParameter: event.target.value})\n    }\n\n    handleViewStateChange = ({viewState}) => {\n        this.setState({viewState})\n    }\n\n    render() {\n        this.colorRange = [0, 1]\n        if (this.state.preloaded && this.state.preloaded.length) {\n            if (this.state.colorParameter === 'condition') {\n                this.colorRange = [...new Set(this.state.preloaded.map(item => item[this.state.colorParameter]))].reverse()\n                const swap = this.colorRange[0];\n                this.colorRange[0] = this.colorRange[1];\n                this.colorRange[1] = swap;\n            } else if (this.state.colorParameter === 'status') {\n                this.colorRange = [...new Set(this.state.preloaded.map(item => item[this.state.colorParameter]))].reverse()\n            } else if (this.state.colorParameter === 'type') {\n                this.colorRange = [...new Set(this.state.preloaded.map(item => item[this.state.colorParameter]))].reverse()\n            } else if (this.state.colorParameter === 'capital_group') {\n                this.colorRange = [...new Set(this.state.preloaded.map(item => item[this.state.colorParameter]))].reverse()\n            } else if (this.state.colorParameter === 'building_year') {\n                this.colorRange = [...new Set(this.state.preloaded.map(item => item[this.state.colorParameter]))].sort((a, b) => a - b).reverse()\n            } else {\n                this.colorRange = [...new Set(this.state.preloaded.map(item => item[this.state.colorParameter]))].sort((a, b) => a - b)\n            }\n\n        }\n\n\n        const layers = [new PolygonLayer({\n            id: 'polygon-layer',\n            data: this.state.preloaded,\n            pickable: true,\n            extruded: true,\n            stroked: true,\n            filled: true,\n            wireframe: true,\n            lineWidthMinPixels: 1,\n            getPolygon: d => {\n                if (d.area) {\n                    try {\n                        const parsed = wkt.parse(d.area)\n                        return parsed.coordinates\n                    } catch (e) {\n                        console.log(d)\n                    }\n\n                } else {\n                    return [[0, 0], [0, 0], [0, 0]]\n                }\n\n            },\n            getElevation: d => {\n                return (d.count_of_storeys * 3)\n            },\n            getFillColor: d => {\n                if (this.state.colorParameter === 'organization') {\n                    let color = colorScaleByValue(this.state.preloaded, d[this.state.colorParameter], this.state.colorParameter)\n                    if (d.id===this.state.selected) {\n                        color = [0,0,0]\n                    }\n                    return color\n                } else {\n                    let color = colorScale(this.colorRange, d[this.state.colorParameter], true, false, this.state.colorParameter)\n                    if (d.id===this.state.selected) {\n                        color = [0,0,0]\n                    }\n                    return color\n                }\n\n\n            },\n            updateTriggers: {\n                getFillColor: [this.state.colorParameter,this.state.selected]\n            },\n            getLineColor: [80, 80, 80],\n            getLineWidth: 0.5,\n            onHover: (hover) => this._onHover(hover)\n        })]\n\n        const {hover} = this.state;\n\n        const maxHeight = window.innerHeight;\n        const maxWidth = window.innerWidth;\n\n        const zoomToHouseHandler = (element) => {\n            if (element.area){\n                const parsed = wkt.parse(element.area);\n                const center = centerOfMass(parsed)\n\n                this.setState({\n                    showDataTable:false,\n                    selected: element.id,\n                    viewState: {\n                        ...this.state.viewState,\n                        latitude:center.geometry.coordinates[1],\n                        longitude:center.geometry.coordinates[0],\n                        zoom:16,\n                        transitionDuration: 2000,\n                        transitionInterpolator: new FlyToInterpolator()\n                    }\n                })\n            } else {\n                alert('Отсутствует информация о положении дома на карте')\n            }\n\n        }\n\n        return (\n            <div>\n                {!this.state.selectorPanelOpened &&\n                <StyledSelectorsOpenPanelButton onClick={() => this.setState({selectorPanelOpened: true})}>\n                    <ClosedSelectorPanelIcon/>\n                </StyledSelectorsOpenPanelButton>\n                }\n\n                {!this.state.legendPanelOpened &&\n                <StyledLegendOpenPanelButton onClick={() => this.setState({legendPanelOpened: true})}>\n                    <ClosedSelectorPanelIcon/>\n                </StyledLegendOpenPanelButton>\n                }\n\n                {this.state.selectorPanelOpened &&\n                <StyledSelectorsPanel>\n                    <StyledPanelHeader>\n                        <StyledButtonPanel icon={<OpenedSelectorPanelIcon/>}\n                                           onClick={() => this.setState({selectorPanelOpened: false})}/>\n                        <MapStylePicker onStyleChange={this.onStyleChange} currentStyle={this.state.style}/>\n                    </StyledPanelHeader>\n                    <StyledLayersSettingsContainer>\n                        <IconicTitle icon={<LayersIcon/>} text={'Выбор параметра цвета'}/>\n                        <Radio.Group className={'radiobutton-group'}\n                                     onChange={this.onChangeColorRendererParameter.bind(this)}>\n                            <Radio className={'radiobutton'} value={'building_year'} defaultChecked={true}>Год\n                                постройки</Radio>\n                            <Radio className={'radiobutton'} value={'area_of_hatas'}>Площадь жилых помещений</Radio>\n                            <Radio className={'radiobutton'} value={'capital_group'}>Тип материала</Radio>\n                            <Radio className={'radiobutton'} value={'condition'}>Состояние здания</Radio>\n                            <Radio className={'radiobutton'} value={'count_of_storeys'}>Число этажей</Radio>\n                            <Radio className={'radiobutton'} value={'full_area'}>Общая площадь</Radio>\n                            <Radio className={'radiobutton'} value={'organization'}>Обслуживающая организация</Radio>\n                            <Radio className={'radiobutton'} value={'type'}>Тип здания</Radio>\n                            <Radio className={'radiobutton'} value={'status'}>Статус здания</Radio>\n                        </Radio.Group>\n                    </StyledLayersSettingsContainer>\n                    <Button onClick={() => {\n                        this.setState({showDataTable: !this.state.showDataTable})\n                    }}>Показать данные</Button>\n                </StyledSelectorsPanel>\n                }\n                <CallModalSelector\n                    handleSelectCall={zoomToHouseHandler}\n                    handleToggleModal={() => {\n                        this.setState({showDataTable: !this.state.showDataTable})\n                    }}\n                    data={this.state.preloaded}\n                    modalVisible={this.state.showDataTable}\n                />\n\n                {this.state.legendPanelOpened && <StyledLegendContainer>\n                    <div className={'titleContainer'}>\n                        <p className={'legend'}>Легенда карты</p>\n                        <StyledButtonLegend icon={<ClosedSelectorPanelIcon/>}\n                                            onClick={() => this.setState({legendPanelOpened: false})}/>\n                    </div>\n                    <div>\n                        {this.legendRendered()}\n                    </div>\n                </StyledLegendContainer>\n                }\n\n                {hover && hover.hoveredObject && (\n                    <div\n                        style={{\n                            position: 'absolute',\n                            padding: '4px',\n                            background: 'rgba(0, 0, 0, 0.8)',\n                            color: '#fff',\n                            maxWidth: '300px',\n                            fontSize: '10px',\n                            zIndex: 9,\n                            maxHeight: `${maxHeight - hover.y}px`,\n                            overflowY: \"hidden\",\n                            pointerEvents: 'none',\n                            transform: `translate(${hover.x}px, ${hover.y}px)`\n                        }}\n                    >\n                        {hover.label.map(el => <p>{el}</p>)}\n                    </div>\n                )}\n\n\n                <DeckGL initialViewState={INITIAL_VIEW_STATE} controller={true} layers={layers}\n                        onViewStateChange={this.handleViewStateChange} viewState={this.state.viewState}>\n                    <StaticMap mapboxApiAccessToken={MAPBOX_TOKEN} mapStyle={this.state.style}/>\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nexport default Map\n","import React from 'react';\nimport './App.css';\nimport ReactMapGL from 'react-map-gl'\nimport Map from \"./Map\";\n\nclass App extends React.Component {\n    state = {\n        viewport: {\n            width: \"100vw\",\n            height: \"100vh\",\n            latitude: 57,\n            longitude: 65,\n            zoom: 10\n        }\n    };\n  render() {\n      return (\n          <div className=\"App\">\n            <Map/>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}